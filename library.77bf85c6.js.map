{"mappings":"khBAAA,IAAAA,EAAAC,EAAA,S,6EAeA,IAGMC,EAAaC,SAASC,cAAc,iCACpCC,EAAWF,SAASC,cAAc,+BAClCE,EAAYH,SAASC,cAAc,uBACnCG,EAAcJ,SAASC,cAAc,cAErCI,GAAW,EAAAR,EAAAS,kBARH,YASRC,GAAa,EAAAV,EAAAS,kBARL,cAyCd,SAASE,EAAcC,GACrB,GAAIA,SAA6CA,IAAY,GAI3D,OA8BIC,EAAU,4OAMhBP,EAAUQ,mBAAmB,aAAcD,QArCzCE,QAAQC,IAAI,yCA8BhB,IACQH,EAzBAI,EAAsBL,EAAQM,KAAI,SAAAC,GACtC,IAAMC,EAAaD,EAAME,MACnBC,EAAc,kCAAoDC,OAAlBJ,EAAMK,aACtDC,EAAmBN,EAAMO,aAAaC,MAAM,IAAIC,MAAM,EAAG,GAAGC,KAAK,IACjEC,EA8BV,SAAmBC,GACjB,IAAMC,EAASD,EAAIb,KAAI,SAAAe,GAErB,OADcA,EAAGC,I,IAGnB,GAAsB,IAAlBF,EAAOG,OACT,MAAO,CAAC,WAENH,EAAOG,QAAU,GACnBH,EAAOI,OAAO,EAAG,GAAI,SAEvB,OAAOJ,EAAOH,KAAK,K,CAzCGQ,CAAUlB,EAAMa,QAC9BM,EAAUnB,EAAMc,GAChBM,EAAcpB,EAAMqB,aAS1B,MAPoB,WAAyDjB,OAA9Ce,EAAQ,wCAA2Df,OAArBD,EAAY,WACpDC,OAD6DH,EAAW,6FAEhCG,OADxCH,EAAW,0FACsFG,OAAzDO,EAAY,+CAA0GP,OAA7DE,EAAiB,8CAEzIF,OAFqLgB,EAAYE,QACjM,GACA,0B,IAIbZ,KAAK,IAIRtB,EAAYO,mBAAmB,YAAaG,E,CA3D9Cf,EAAWwC,iBAAiB,SAa5B,WACExC,EAAWyC,UAAUC,IAAI,cACzBvC,EAASsC,UAAUE,OAAO,cAC1BvC,EAAUwC,UAAY,GACtBvC,EAAYuC,UAAY,GACxBnC,EAAcD,E,IAjBhBL,EAASqC,iBAAiB,SAoB1B,WACExC,EAAWyC,UAAUE,OAAO,cAC5BxC,EAASsC,UAAUC,IAAI,cACvBtC,EAAUwC,UAAY,GACtBvC,EAAYuC,UAAY,GACxBnC,EAAcH,E,IAvBZH,EAASsC,UAAUI,SAAS,cAC9BpC,EAAcH,GAIhBG,EAAcD,E","sources":["src/js/library.js"],"sourcesContent":["import {\n  saveLocalStorage,\n  loadLocalStorage,\n  removeLocalStorage,\n} from './localStorage';\nimport './theme';\nimport getMoviesApi from './getMoviesApi';\nimport { appendMoviesMarkup } from './moviesMarkup';\n\nimport './auth';\nimport './footerModal';\nimport './modalMovieMarkup';\nimport './getfullMovieInfo';\n\n\nconst KEY_Q = 'queueKey';\nconst KEY_W = 'watchedKey';\n\nconst watchedBtn = document.querySelector('button[data-action=\"watched\"]');\nconst queueBtn = document.querySelector('button[data-action=\"queue\"]');\nconst myLibrary = document.querySelector('.library__container');\nconst labraryList = document.querySelector('.film_list');\n\nconst queueKey = loadLocalStorage(KEY_Q);\nconst watchedKey = loadLocalStorage(KEY_W);\n\n// console.log(queueKey);\n\nwatchedBtn.addEventListener('click', handleRenderWatchedClick);\nqueueBtn.addEventListener('click', handleRenderQueueClick);\n\nif (queueBtn.classList.contains('js-current')) {\n  libraryMarkup(queueKey);\n  return;\n}\n\nlibraryMarkup(watchedKey);\n\n// ===================================\n// FUNCTION\n\nfunction handleRenderWatchedClick() {\n  watchedBtn.classList.add('js-current');\n  queueBtn.classList.remove('js-current');\n  myLibrary.innerHTML = '';\n  labraryList.innerHTML = '';\n  libraryMarkup(watchedKey);\n}\n\nfunction handleRenderQueueClick() {\n  watchedBtn.classList.remove('js-current');\n  queueBtn.classList.add('js-current');\n  myLibrary.innerHTML = '';\n  labraryList.innerHTML = '';\n  libraryMarkup(queueKey);\n}\n\nfunction libraryMarkup(nameKey) {\n  if (nameKey === null || nameKey === undefined || nameKey === []) {\n    // Тут должна быть заглушка для MyLibrary - картинка или текст, что фильмов в библиотеке нет\n    libraryEmptyMarkup();\n    console.log('Поставлена инфо что библиотека пустая');\n    return;\n  }\n\n  // const elementUl = '';\n  // myLibrary.insertAdjacentHTML('beforeend', elementUl);\n  const markupLibraryMovies = nameKey.map(movie => {\n    const movieTitle = movie.title;\n    const moviePoster = `https://image.tmdb.org/t/p/w500${movie.poster_path}`;\n    const movieReleaseDate = movie.release_date.split('').slice(0, 4).join('');\n    const movieGenres = getGenres(movie.genres);\n    const movieId = movie.id;\n    const voteAverage = movie.vote_average;\n    \n    const movieMarkup = `<li id=\"${movieId}\" class=\"film-list__item\"><img src=\"${moviePoster}\" alt=\"${movieTitle}\" class=\"film-list__item-poster\" loading=\"lazy\">\n     <h3 class=\"film-list__item-title\">${movieTitle}</h3>\n     <div class=\"film-list__item-details\"><span class=\"film-list__item-genres\">${movieGenres}</span>|<span class=\"film-list__item-year\">${movieReleaseDate}</span><span class=\"film-list__item-vote\">${voteAverage.toFixed(\n                  1\n                )}</span></div>\n   </li>`;\n    \n    return movieMarkup;\n  }).join('');\n\n  // console.log(markupLibraryMovies);\n\n  labraryList.insertAdjacentHTML('beforeend', markupLibraryMovies);\n\n}\n\nfunction libraryEmptyMarkup() {\n  const markup = `<h2 class=\"library-empty__title\">\n          Your movie library to watch is empty\n        </h2>\n        <div class=\"library-empty__tumb\">\n          <a href=\"./index.html\" class=\"library-empty__btn\">CHOOSE MOVIE</a>\n        </div>`;\n  myLibrary.insertAdjacentHTML('afterbegin', markup);\n}\n\nfunction getGenres(ids) {\n  const genres = ids.map(id => {\n    const genre = id.name;\n    return genre;\n  });\n  if (genres.length === 0) {\n    return ['Unknown'];\n  }\n  if (genres.length >= 4) {\n    genres.splice(2, 10, 'Other');\n  }\n  return genres.join(', ');\n}\n"],"names":["$UL92Z","parcelRequire","watchedBtn","document","querySelector","queueBtn","myLibrary","labraryList","queueKey","loadLocalStorage","watchedKey","libraryMarkup","nameKey","markup","insertAdjacentHTML","console","log","markupLibraryMovies","map","movie","movieTitle","title","moviePoster","concat","poster_path","movieReleaseDate","release_date","split","slice","join","movieGenres","ids","genres","id","name","length","splice","getGenres","movieId","voteAverage","vote_average","toFixed","addEventListener","classList","add","remove","innerHTML","contains"],"version":3,"file":"library.77bf85c6.js.map"}